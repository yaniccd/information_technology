# EXERCICE 13
# EXERCICES DE REVISION

# QUIZ 1. DECOUPAGE D'UNE CHAINE
# Soit la chaine de caract√®res chaine et les entiers i et n. Toutes ces variables sont pr√©existantes (ne pas changer leur valeur).
#
# En utilisant l'op√©rateur [], d√©couper une sous-cha√Æne de n caract√®res dans chaine √† partir de l'indice i.
# Affichez le r√©sultat √† l'aide de la fonction print.
chaine = 'Bonjour le monde'
i = 3
n = 7

# QUIZ 1. REPONSE
print(chaine[i:n+i])

# QUIZ 2. FONCTION AVEC ARGUMENT OBLIGATOIREMENT NOMME
# D√©finissez une fonction nomm√©e √©cho qui accepte en entr√©e deux arguments positionnels et trois arguments obligatoirement nomm√©s.
# Les noms de vos arguments obligatoirement nomm√©s doivent √™tre karg1, karg2, et karg3. Donnez respectivement
# √† ces trois arguments les valeurs par d√©faut 1, 2 et 3.
#
# Votre fonction doit par ailleurs retourner le tuple des valeurs re√ßues pour ses cinq arguments, avec notamment dans
# l'ordre les valeurs des trois arguments nomm√©s karg1, karg2, et karg3.

# QUIZ 2. REPONSE
def echo(arg1, arg2, *, karg1=1, karg2=2, karg3=3):
    return arg1, arg2, karg1, karg2, karg3

# QUIZ 3. PATRON +--+
# D√©finissez une fonction nomm√©e patron qui accepte en argument deux entiers  ùëö‚â•0  et  ùëõ‚â•0 , et qui retourne une cha√Æne
# de caract√®res form√©e d'un + initial suivi de  ùëõ  fois le patron constitu√© d'une s√©quence de  ùëö  caract√®res - suivis d'un seul +.
# Par exemple, l'appel de patron(9, 3) doit produire la cha√Æne de caract√®res suivante :
# +---------+---------+---------+
# Notez bien que votre fonction ne doit rien afficher, mais simplement retourner la cha√Æne de caract√®res demand√©e.
#
# Dans le cas o√π l'un des arguments  ùëö  et  ùëõ  de votre fonction recevrait une valeur plus petite que z√©ro,
# vous devez soulever une exception de type ValueError.
#
# Prenez soin de bien tester votre solution dans votre notebook avant de la soumettre au serveur. Pour chaque exercice,
# vous n'avez droit qu'√† un maximum de trois soumissions avec r√©troaction. Apr√®s ces trois premiers essais, vous pourrez continuer
# √† soumettre de nouvelles solutions, mais vous ne recevrez plus aucune r√©troaction. N'oubliez pas que c'est la derni√®re soumission qui compte,
# peu importe que celle-ci soit meilleure ou pire que la pr√©c√©dente.

# QUIZ 3. REPONSE
def patron(m, n):
    if m < 0 or n < 0:
        raise ValueError
    return '+' + n*(m*'-' + '+')

print(patron(9,3))
print(patron(9,3) == '+---------+---------+---------+')

# QUIZ 4. 0-10-20
# D√©finissez une fonction nomm√©e patron10 qui accepte en argument deux entiers  ùëö‚â•0  et  ùëõ‚â•0 , et qui retourne une cha√Æne de
# caract√®res form√©e d'un premier groupe de  ùëö  espaces suivis d'un z√©ro, suivi d'une s√©quence croissante de multiples de 10 s√©par√©s
# par des espaces. La derni√®re valeur de la s√©quence est le plus petit multiple de 10 sup√©rieur ou √©gal √†  ùëõ . De plus, notez que vos valeurs
# doivent √™tre s√©par√©es les unes des autres par un nombre d'espaces qui fait en sorte que le dernier chiffre de chaque valeur (un 0) soit
# toujours exactement √† 10 caract√®res de ses voisins. Par exemple, patron10(5, 23) doit produire la cha√Æne suivante o√π les espaces ont √©t√©
# substitu√©s par des points afin de vous permettre de mieux les distinguer‚Äâ:
# .....0........10........20........30
# Notez bien que le nombre d'espaces qui s√©parent les valeurs adjacentes d√©pend de leur ordre de grandeur. Dans l'exemple ci-dessus, il y
# en a toujours 8 puisqu'il n'y a que des dizaines, mais le nombre d'espaces doit √™tre r√©duit √† 7 pour les centaines, √† 6 pour les milliers, etc.
#
# Notez aussi que votre fonction ne doit rien afficher, mais simplement retourner la cha√Æne de caract√®res demand√©e.
#
# Dans le cas o√π l'un des arguments  ùëö  et  ùëõ  de votre fonction recevrait une valeur plus petite que z√©ro, vous devez soulever une exception de type ValueError.
#
# Prenez soin de bien tester votre solution dans votre notebook avant de la soumettre au serveur. Pour chaque exercice, vous n'avez droit
# u'√† un maximum de trois soumissions avec r√©troaction. Apr√®s ces trois premiers essais, vous pourrez continuer √† soumettre de nouvelles solutions,
#  mais vous ne recevrez plus aucune r√©troaction. N'oubliez pas que c'est la derni√®re soumission qui compte, peu importe que celle-ci soit
# meilleure ou pire que la pr√©c√©dente.

# QUIZ 4. REPONSE
def patron10(m, n):
    if m < 0 or n < 0:
        raise ValueError
    res = ' '*m + '0'
    for i in range((n+1)//10+1):
        res += '{:10}'.format((i+1)*10) # pour avoir exactement 10 caracteres dans format {:10}
    return res

print(patron10(5, 23))

# QUIZ 5. AFFICHAGE D'UN HISTOGRAMME
# Soit un dictionnaire qui associe des √©tiquettes √† des valeurs. Les √©tiquettes sont des cha√Ænes de caract√®res d'une longueur arbitraire;
# les valeurs sont des entiers positifs ou nuls.
#
# D√©finissez une fonction nomm√©e histogramme, qui accepte un tel dictionnaire en argument et affiche un histogramme des valeurs de celui-ci selon le mod√®le ci-dessous.

# QUIZ 5. REPONSE
def patron10(m, n):
    res = ' '*m + '0'
    for i in range(int(round(n)-1)//10+1):
        res += '{:10}'.format((i+1)*10)
    return res

def axe(m, n):
    return '+' + ('-'*m + '+')*((n-1)//10+1)

def batonnet(etiq, val, maxetiq, maxval):
    res = '{{:>{}}}:{}'.format(maxetiq, '-'*min(val, maxval)).format(etiq[:maxetiq])
    return res if val <= maxval else res[:-1]+'*'

def histogramme(dico, *, maxetiq=None, maxval=None):
    # trouver la plus longue √©tiquette et la valeur max
    if not maxetiq:
        maxetiq = 0
        for key in dico:
            if len(key) > maxetiq:
                maxetiq = len(key)
    if not maxval:
        maxval = 0
        for key, value in dico.items():
            if value > maxval:
                maxval = value
    print(patron10(maxetiq, maxval))
    print(' '*maxetiq + axe(9, maxval))
    for key in sorted(dico.keys()):
        print(batonnet(key, dico[key], maxetiq, maxval))
    print(' '*maxetiq + axe(9, maxval))
    print(patron10(maxetiq, maxval))


dico = {'chats': 10, 'poissons rouges': 3, 'chiens': 25, 'tortues': 7}
histogramme(dico, maxetiq=8, maxval=18)
histogramme(dico, maxetiq=8, maxval=31)

# QUIZ 6. CREATION D'UNE CLASSE D'EXCEPTION
# D√©finissez une classe nomm√©e MonErreur qui d√©signe un type d'erreur particulier √† votre application. Faites en sorte qu'en affichant
# une instance de cette classe le message de l'exception soit formatt√© de la fa√ßon suivante‚Äâ: MonErreur: ¬´message¬ª o√π message est le
# message avec lequel l'exception a √©t√© constuite. Dans le cas particulier o√π l'exception serait soulev√©e avec aucun message, ou avec
# une cha√Æne vide, on veut que l'affichage soit simplement MonErreur au lieu de MonErreur: ¬´¬ª.
#
# D√©finissez aussi une fonction nomm√©e soulever_mon_erreur qui accepte en argument un message sous la forme d'une cha√Æne de caract√®res
# et qui soul√®ve une exception de type MonErreur en lui passant la cha√Æne re√ßue.
#
# Finalement, faites un appel √† votre fonction soulever_mon_erreur √† l'int√©rieur d'un bloc try, en lui passant le message
# "mon type d'erreur particulier" et en en affichant l'exception soulev√©e √† la console.

# QUIZ 6. REPONSE
class MonErreur(Exception):
    def __str__(self):
        if self.args and self.args[0]:
            return 'MonErreur: "{}"'.format(self.args[0])
        return 'MonErreur'


def soulever_mon_erreur(message):
    raise MonErreur(message)

try:
    soulever_mon_erreur("mon type d'erreur particulier")
except MonErreur as err:
    print(err)

