# EXERCICE 6
# Notion de Classes et d'Objets

# 6.1.1 CLASSE POINT
# D√©finissez une classe nomm√©e Point qui encapsule les coordonn√©es  (ùë•,ùë¶)  d'un point dans le plan cart√©sien.
# Le constructeur de votre classe (m√©thode __init__) doit accepter en argument deux nombres arbitraires
# et les affecter respectivement √† des variables d'instance (variables stock√©es dans self) nomm√©es x et y.

# 6.1.1 REPONSE
class Point():
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __str__(self):
        return '({},{})'.format(self.x, self.y)

    def __add__(self, other):
        return Point(self.x + other.x, self.y + other.y)

    def norme(self):
        return (self.x**2 + self.y**2)**0.5

Point1 = Point(1, 2)
print(Point1)
Point2 = Point(3, 3)
Point3 = Point1 + Point2
print(Point3)
print(Point3.norme())

# 6.1.2 CLASSE ET OPERATEUR []
# D√©finissez une classe nomm√©e Vecteur qui encapsule une s√©quence de nombres r√©els.
# Le constructeur de votre classe (m√©thode __init__) doit accepter en argument un nombre arbitraire de valeurs,
# faire une liste avec ces valeurs et affecter cette liste √† une variable d'instance nomm√©e data.
# Ajoutez √† votre classe les m√©thodes __getitem__et __setitem__ permettant d'implanter l'op√©rateur [] pour
# les instances de votre classe. Outre l'argument self, la m√©thode __getitem__ doit accepter l'indice de la
# composante d√©sir√©e et retourner la valeur de cette composante. De m√™me, la m√©thode __setitem__ doit accepter
# l'indice de la composante d√©sir√©e ainsi que la valeur que l'on veut donner √† cette composante et effectuer
# l'affectation de cette valeur √† cette composante. Notez que la fonction __setitem__ ne doit rien retourner.

# 6.1.2 REPONSE
class Vecteur():
    def __init__(self, *args):
        self.data = list(args)

    def __getitem__(self, item):
        if item < 0 or item >= len(self.data):
            raise IndexError('Indice invalide')
        return self.data[item]

    def __setitem__(self, key, value):
        if key < 0 or key >= len(self.data):
            raise IndexError('Indice invalide')
        self.data[key] = value

V = Vecteur(5, 6, 7)
print(V[0], V[1], V[2])
V[0] = 23
V[1] = 37
V[2] = 15
print(V[0], V[1], V[2])

# 6.1.3 HERITAGE SIMPLE
# D√©finissez une classe nomm√©e B qui h√©rite de la classe A et qui lui ajoute
# une m√©thode de conversion en cha√Æne de caract√®res. Faites en sorte que les √©nonc√©s‚Äâ:
# a = B(27)
# print(a)
# produisent la sortie valeur = 27.
class A:
    def __init__(self, x):
        self.val = x

    def getValue(self):
        return self.val

    def setValue(self, x):
        self.val = x

# 6.1.3 REPONSE
class B(A):
    def __str__(self):
        return 'valeur  = {}'.format(self.val)

a = B(27)
print(a)

# QUIZ 1. PATRON -+-+-+-
# D√©finissez une fonction nomm√©e make_sep_line qui re√ßoit en argument un entier  ùëõ  et retourne
# une cha√Æne de caract√®res constitu√©e de  ùëõ  caract√®res - intercal√©s de  ùëõ‚àí1  caract√®res +.
# Par exemple, l'appel de make_sep_line(4) doit produire‚Äâ:
# `-+-+-+-`.
# Dans le cas o√π  ùëõ‚â§0 , votre fonction doit soul√®ver une exception de type AssertionError.

# QUIZ 1. REPONSE
def make_sep_line(n):
    if n <= 0:
        raise AssertionError('Assertion error')
    return '-+'*(n-1) + '-'

print(make_sep_line(4))

# QUIZ 2. Patron x | y | z
# D√©finissez une fonction nomm√©e make_data_line qui re√ßoit en argument une liste de  ùëõ  valeurs
# [ùë•1,ùë•2,‚Ä¶,ùë•ùëõ] , o√π les  ùë•ùëñ ,  ùëñ=1,‚Ä¶,ùëõ , sont des cha√Ænes d'un seul caract√®re, et retourne la cha√Æne ¬´  ùë•1|ùë•2|‚ãØ|ùë•ùëõ  ¬ª.
# Par exemple, l'appel de makeDataLine(['a', 'b', 'c', 'd']) doit produire a|b|c|d.

# QUIZ 2. REPONSE
def make_data_line(liste):
    if not liste:
        return ''
    res = ''
    for valeur in liste:
        if not isinstance(valeur, str):
            raise TypeError()
        if len(valeur) != 1:
            raise ValueError("une valeur n'est pas un caractere unique")
        res += valeur + '|'
    return res[:-1]

print(make_data_line(['a', 'b', 'c', 'd']))

# QUIZ 3. CLASSE TABLE
# D√©finissez une classe nomm√©e Table afin d'encapsuler un tableau de
# ùëö  lignes par  ùëõ  colonnes. Votre classe doit poss√©der l'interface suivante‚Äâ:
# Un **constructeur** qui **accepte** les arguments  ùëö  et  ùëõ  et qui **initialise** le tableau avec des
# valeurs `None`. Dans le cas o√π  ùëö‚â§0  ou  ùëõ‚â§0 , le constructeur doit soulever une **exception** de type AssertionError.
# Un **op√©rateur** `[]` qui **accepte** un **couple** d'indices  [ùëñ,ùëó]  afin de pouvoir sp√©cifier, autant
# en **lecture** qu'en **√©criture**, l'√©l√©ment du tableau qui correspond √† la ligne  ùëñ  et √† la colonne  ùëó .
# Dans le cas d'un indice **invalide**, c'est-√†-dire lorsque  ùëñ<0  ou  ùëñ‚â•ùëö  ou  ùëó<0  ou  ùëó‚â•ùëõ , la m√©thode doit
# soulever une **exception** de type IndexError.
# Une **m√©thode** nomm√©e `set_values` qui **accepte** en argument un **it√©rable*** de  ùëö√óùëõ  valeurs et qui affecte
# ces valeurs aux √©l√©ments du tableau dans l'ordre des lignes (i.e. les  ùëõ  premi√®res valeurs sont affect√©es de la 1√®re ligne,
# les  ùëõ  suivantes √† la 2√®me ligne, *etc*.). Dans le cas o√π le nombre de valeurs dans l'*it√©rable* ne serait
# pas √©gal √†  ùëö√óùëõ  (soit plus petit, soit plus grand), la m√©thode doit soulever une exception de type ValueError.
# Cette m√©thode doit aussi retourner une r√©f√©rence sur le tableau.
# Une **m√©thode** nomm√©e `get_line` qui **accepte** en argument un **indice** de ligne, et **retourne** la **liste**
# des valeurs associ√©es √† cette ligne dans le tableau. Dans le cas d'un indice de ligne **invalide**, la m√©thode doit soulever
# une **exception** de type IndexError.
# Une **m√©thode** nomm√©e `get_size` qui **retourne** la **taille** du tableau sous la forme d'un **tuple**  (ùëö,ùëõ) .

# QUIZ 3. REPONSE

class Table:
    def __init__(self, m, n):
        assert m > 0 and n > 0
        self.m = m
        self.n = n
        self.data = []
        self.set_values(None for _ in range(m*n))

    def __getitem__(self, index):
        i, j = index
        if i < 0 or i >= self.m or j < 0 or j >= self.n:
            raise IndexError
        return self.data[i*self.n + j]

    def __setitem__(self, index, x):
        i, j = index
        if i < 0 or i >= self.m or j < 0 or j >= self.n:
            raise IndexError
        self.data[i*self.n + j] = x

    def set_values(self, iterable):
        data = list(iterable)
        if len(data) != self.n*self.m:
            raise ValueError()
        self.data = data
        return self

    def get_line(self, i):
        if i < 0 or i >= self.m:
            raise IndexError
        return self.data[i*self.n: (i+1)*self.n]

    def get_size(self):
        return self.m, self.n

# QUIZ 4. CREATION D'UNE GRILLE
# D√©finissez une fonction nomm√©e make_grid qui accepte en argument une table (quiz pr√©c√©dent),
# et retourne une cha√Æne de caract√®res repr√©sentant les √©l√©ments de cette table √† l'int√©rieur d'une grille.
# Par exemple, pour le tableau x = Table(m=3, n=4), initialis√© par x.set_values('X' for _ in range(12)),
# l'appel de make_grid(x) doit retourner la cha√Æne‚Äâ:
# X|X|X|X\n-+-+-+-\nX|X|X|X\n-+-+-+-\nX|X|X|X\n
# et l'√©nonc√© print(make_grid(x)) produira‚Äâ:
# X|X|X|X
# -+-+-+-
# X|X|X|X
# -+-+-+-
# X|X|X|X

# QUIZ 4. REPONSE
def make_grid(table):
    m, n = table.get_size()
    valeur = ''
    for i in range(m-1):
        valeur += make_data_line(table.get_line(i)) + '\n'
        valeur += make_sep_line(n) + '\n'
    valeur += make_data_line(table.get_line(m-1))
    return valeur

x = Table(m=3,n=4)
x.set_values(['O', 'X', 'O', 'O', 'X', 'O', 'O', 'O', 'O', 'O', 'X', 'X'])
print(make_grid(x))

# QUIZ 5. CLASS TICTACTOE
# D√©finissez une classe nomm√©e TicTacToe permettant d'encapsuler le jeu de Tic-tac-toe.
# Le jeu Tic-tac-toe se joue sur une grille carr√©e de  3√ó3  cases. Deux joueurs s'affrontent.
# Ils doivent remplir chacun leur tour une case de la grille avec le symbole qui leur est attribu√©‚Äâ: O ou X.
# Le gagnant est celui qui arrive √† aligner trois symboles identiques, horizontalement, verticalement ou en diagonale.
#
# D√©rivez votre classe de la classe Table d√©finie dans le contexte de cet exercice, et donnez-lui l'interface suivante‚Äâ:
# Un **constructeur** qui **initialise** une grille de  3√ó3  cases avec des espaces.
# Une **m√©thode** qui **convertit** cette grille en cha√Æne de caract√®res, en faisant appel √† la fonction `make_grid` d√©finie dans le **contexte** de cet exercice.
# Une **m√©thode** nomm√©e `reset` qui **r√©initialise** le jeu en remplissant la grille par des espaces.
# Une **m√©thode** nomm√©e `choose` qui re√ßoit en argument le **symbole** √† jouer ainsi que deux arguments correspondant aux indices de **ligne** et de **colonne** de la case o√π le symbole doit √™tre inscrit. Cette m√©thode ne retourne **rien**, mais soul√®ve une exception de type ValueError si le symbole re√ßu est autre chose que `X` ou `O` (comme dans ¬´‚ÄâO Canada‚Äâ¬ª) ou si la case sp√©cifi√©e n'est **pas** libre. Elle doit √©galement soulever une exception de type IndexError, si les **indices** de ligne et de colonne sont **invalides**.
# Une **m√©thode** nomm√©e `check_win` qui **d√©termine** si l'√©tat actuel du jeu correspond √† une situation **gagnante**. Dans le cas d'une situation gagnante, cette m√©thode **retourne** le symbole du joueur qui a gagn√©‚Äâ; autrement la m√©thode ne retourne **rien**. Une situation est **gagnante** dans l'un ou l'autre des cas suivants‚Äâ:
# trois symboles **identiques** sont align√©s sur une m√™me **ligne**‚Äâ;
# trois symboles **identiques** sont align√©s sur une m√™me **colonne**‚Äâ;
# trois symboles **identiques** sont align√©s sur une **diagonale**.

# QUIZ 5. REPONSE
class Tictactoe(Table):
    def __init__(self):
        super().__init__(3, 3)
        self.reset()

    def reset(self):
        self.set_values(' ' for _ in range(9))

    def __str__(self):
        return make_grid(self)

    def choose(self, i, j, valeur):
        if valeur != 'X' and valeur != 'O':
            raise ValueError()
        if self[i, j] != ' ':
            raise ValueError()
        if i >=3 or i < 0 or j >= 3 or j < 0:
            raise IndexError()
        self[i, j] = valeur

    def check_win(self):
        for i in range(3):
            if self[i, 0] == self[i, 1] == self[i, 2] != ' ':
                return self[i, 0]
            if self[0, i] == self[1, i] == self[2, i] != ' ':
                return self[0, i]
        if self[0, 0] == self [1, 1] == self[2, 2] != ' ':
            return self[0, 0]
        if self[2, 0] == self[1, 1] == self[2, 0] != ' ':
            return self[1, 1]
        return None