# CHAPITRE 12.1
# INTRODUCTION AU CALCUL SCIENTIFIQUE - numpy
import numpy as np

# References
#   http://numpy.scipy.org/
#   http://www.scipy.org/Tentative_NumPy_Tutorial

# MODULE numpy
# Ce module est √† la base du calcul scientifique en Python.
# Il inclus notamment‚Äâ:
#
# un type de donn√©es capable de g√©rer des tableaux √†  ùëõ  dimensions‚Äâ;
# des outils d'int√©gration pour du code en C/C+ et Fortran‚Äâ;
# des fonctionnalit√©s de base en math√©matiques et en statistiques‚Äâ;
# des fonctions sp√©cialis√©es pour g√©n√©rer des tableaux de nombres pseudo-al√©atoires.
# Il est √† la base du module scipy qui offre des fonctionnalit√©s plus √©volu√©es.

# Le module numpy d√©finit une classe nomm√©e ndarray, pour g√©rer des tableaux multidimensionnels dont les √©l√©ments (habituellement des nombres) sont homog√®nes‚Äâ:
#
# tous les √©l√©ments du tableau sont de m√™me type‚Äâ;
# le type est fix√© au moment de la cr√©ation du tableau‚Äâ;
# le nombre de dimensions est √©galement fix√© au moment de sa cr√©ation.

# La fonction arange est l'√©quivalent du range standard‚Äâ; elle produit une s√©quence de nombres, mais sous la forme d'un tableau d'√©l√©ments homog√®nes‚Äâ:
a = np.arange(12)
print(a)
print('')
#La m√©thode reshape permet de modifier la forme du tableau‚Äâ:
b = a.reshape(3, 4)
print(b)
print('')
# Elle retourne un nouveau tableau‚Äâ; il faut que la nouvelle forme poss√®de le m√™me nombre d'√©l√©ments que la forme d'origine. Par exemple‚Äâ:
print(a.reshape(3, 2, 2))
print('')

# Les tableaux numpy poss√®dent des attributs standards‚Äâ:
print(a.shape, b.shape)
print(a.ndim, b.ndim)
print(a.size, b.size)
print(a.dtype.name, b.dtype.name) #int sur 32 bits

# On peut aussi cr√©er un tableau √† partir d'un it√©rable d'it√©rables (p.ex. une liste de listes)‚Äâ; on obtient alors un tableau √† deux dimensions‚Äâ:
d = np.array([(1.5, 2, 3), (4, 5, 6)])
print(d)
print(type(d))
print(d.dtype.name) #float sur 64 bits

# D'autres fonctions sont aussi disponibles pour cr√©er des tableaux numpy particuliers, notamment les
# fonctions zeros et ones qui initialisent les tableaux avec des z√©ros et des uns, respectivement‚Äâ:
e = np.zeros((3,4))
print(e)

# Par d√©faut, les tableaux sont constitu√©s de nombres √† virgule flottante cod√©s sur 64 bits.
# On peut cependant sp√©cifier le type d√©sir√© lors de la cr√©ation du tableau. Par exemple‚Äâ:
f = np.ones((3,4), dtype=np.int16)
print(f)

# Les types d'√©l√©ments disponibles sont‚Äâ:
#
# bool√©ens: bool‚Äâ;
# nombres entiers non sign√©s: uint8, uint16, uint32, uint64‚Äâ;
# nombres entiers sign√©s: int8, int16, int32, int64‚Äâ;
# nombres √† virgules flottantes‚Äâ: float32, float64‚Äâ;
# nombres complexes‚Äâ: complex64, complex128.

# Les op√©rations sur les tableaux numpy s'effectuent toujours √©l√©ment par √©l√©ment‚Äâ:
x = np.array([20, 20, 40, 30])
y = np.array([2, 4, 5, 1])
print(x - y)
print(x/y)
print(y**2)
print(x*y)
print('')

# Pour le produit matriciel, il faut utiliser la fonction dot‚Äâ:
A = np.array([[1,1],
             [0,0]])
B = np.array([[2,0],
             [3,4]])
C = np.dot(A, B)
print(C)
print('')

# On peut aussi faire des op√©rations sans cr√©er de nouveaux tableaux‚Äâ:
A = np.ones((2,3), dtype=np.int)
A *= 3
print(A)
print('')

# On peut facilement construire des matrices de nombres pseudo-al√©atoires (l'interface est similaire √† celle du module random standard)‚Äâ:
B = np.random.random((2,3))
print(B)
B += (A)
print(B)
print('')
# On remarque que numpy effectue des conversions automatiques de type, puisque le type des √©l√©ments d'un tableau ne peut pas changer apr√®s sa cr√©ation.
# Lorsqu'on combine des √©l√©ments de types diff√©rents, le r√©sultat s'exprime dans le type le plus g√©n√©ral.
print(A+B)

# Diff√©rentes fonctions permettent de traiter l'ensemble des √©l√©ments d'un tableau, sans tenir compte de sa forme‚Äâ:
C = np.arange(12).reshape((3,4))
print(C.sum(), C.min(), C.max())
print('')
# on peut restreindre l'operation a un axe
# Dans le cas d'un tableau √† deux dimensions, l'axe 0 correspond (par convention) aux lignes, et l'axe 1 au colonnes.
C[2,0] = 1
print(C, end='\n\n')
print("axe 1 = ", C.max(axis = 1), end='\n\n')
print("axe 0 = ", C.max(axis = 0), end='\n\n')

# On peut aussi d√©couper les tableaux numpy de la m√™me fa√ßon que l'on d√©coupe les listes.
a = np.arange(9)**3
print(a[2])
print(a[2:5])
a[:6:2] = -10
print(a)
print(a[::-1], end='\n\n')

# dans le cas de deux dimensions
b = np.arange(12).reshape((3,4))
print(b[0,2])

# On doit pr√©ciser un d√©coupage sur les indices des deux dimensions, en s√©parant ces d√©coupages par une virgule.
# Par exemple, nous avons ci-dessus d√©coup√© l'√©l√©ment qui est √† la crois√©e de la ligne d'indice 2 et de la colonne d'indice 3.
# Les d√©coupages dans chaque dimension fonctionnent comme ceux de la liste ou de la cha√Æne de caract√®res. Il s'agit simplement de les s√©parer par une virgule.
print(b, end='\n\n')
print(b[:,1], end='\n\n')
print(b[1:3,:], end='\n\n')
print(b[::-1,:], end='\n\n')
print(b[:-1,:], end='\n\n')

# Lorsqu'on it√®re sur un tableau multidimensionnel, on it√®re en fait sur les √©l√©ments du premier axe‚Äâ:
for row in b:
    print(row)

# On peut aussi aplatir un tableau multidimensionnel avec la m√©thode ravel‚Äâ:
print('')
print(b.ravel())

# On peut aussi changer sa forme
print('')
print(b.reshape(2,6), end='\n\n')

# On peut changer la taille du tableau avec resize (des 0 sont ajoutee)
b = np.array([[1, 2, 3],
              [4, 5, 6],
              [7, 8, 9]])
print(b, end='\n\n')
b.resize((3,5))
print(b, end='\n\n')