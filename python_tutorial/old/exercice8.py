# EXERCICE 8
# Exceptions et traitement des erreurs

# 8.1.1 SOULEVEMENT D'UNE EXCEPTION
# D√©finissez une fonction nomm√©e valider_valeur qui accepte trois arguments‚Äâ:
# un nombre‚Äâ;
# une borne inf√©rieure‚Äâ;
# une borne sup√©rieure.
# Votre fonction doit retourner le nombre re√ßu √† condition que celui-ci soit
# sup√©rieur ou √©gal √† la borne inf√©rieure et inf√©rieur ou √©gal √† la borne sup√©rieure.
# Sinon, votre fonction doit soulever une exception de type ValueError.

# 8.1.1 REPONSE
def valider_valeur(n, a, b):
    if n < a or n > b:
        raise ValueError("votre valeur {} n'est pas incluse dans [{}, {}]".format(n, a, b))
    return n

# 8.1.2 EXCEPTION MYSTERIEUSE
# On vous demande de d√©finir une fonction nomm√©e fonction qui accepte en argument une valeur enti√®re et qui
# fait appel √† la fonction myst√©rieuse en lui passant cette valeur. Faites en sorte que votre fonction puisse
# traiter n'importe quel type d'exception soulev√©e par la fonction myst√©rieuse‚Äâ; vous pouvez cependant supposer
# qu'elles sont toutes d√©riv√©es de la classe Exception.
# Pour traiter l'exception, on vous demande simplement d'afficher le nom de la classe, suivi d'un :, suivi
# du message contenu dans l'exception. Par exemple UneClasse: message o√π UneClasse est le nom de la
# classe et message le message de l'exception.
# Pour r√©cup√©rer le nom de la classe, il vous suffit de passer l'exception √† la fonction standard type et
# de r√©cup√©rer son attribut __name__. Ainsi, par exemple, si l'objet associ√© √† l'exception se nomme err,
# alors le nom de sa classe sera type(err).__name__.
# Dans le cas o√π la fonction myst√©rieuse retournerait un r√©sultat au lieu de soulever une exception,
# alors afficher simplement ce r√©sultat en utilisant print.
def mystere(n):
    exceptions = [RuntimeError, AssertionError, KeyError, ValueError, IndexError, NameError]
    n = n % len(exceptions)
    if n == 0: return 'Ceci est un resultat mysterieux!'
    raise exceptions[n % len(exceptions)]('Ceci est une exception mysterieuse!')

# 8.1.2 REPONSE
def fonction(entier):
    try:
        res = mystere(entier)
        print(res)
    except Exception as err:
        print('{} : {}'.format(type(err).__name__, err))

fonction(4)
fonction(11)

# 8.2.1 IMPORTATION SIMPLE
# Pour cet exercice, on vous demande simplement d'importer le module standard math,
# mais de faire en sorte qu'il porte le nom math√©matique au lieu de math.
# On vous demande √©galement d'afficher √† la console (avec print) la liste de tous
# les attributs contenus dans ce module. Pour ce faire, utilisez la fonction standard dir.

# 8.2.1 REPONSE
import math as mathematique
print(dir(mathematique))

# 8.2.2 IMPORTATTION D'ATTRIBUTS PARTICULIERS
# Pour cet exercice, vous devez importer dans le module courant uniquement les attributs
# pi, cos et sin du module math. Ne pas importer le module en entier, mais seulement
# les attributs demand√©s. Pour ce faire, utilisez la forme from de l'√©nonc√© import.
# Faites cette importation multiple en un seul √©nonc√© (en s√©parant les trois attributs par des virgules).
# Affichez la valeur de  ùúã  √† la console.

# 8.2.2 REPONSE
from math import pi, cos, sin
print(pi)